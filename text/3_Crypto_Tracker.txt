[ react-router-dom ]
- 어플리케이션에 URL을 준다.
- npm i react-router-dom
- import { BrowserRouter,Switch,Route } from 'react-router-dom';

[ react-query ]
- npm i react-query

-------------------------------------------------------------------
[ useParams ]
- useParams hook은 /:id 등 params 값을 가져온다.

const params = useParams();

interface Params{
  coinId:string
}

const { coinId } = useParams<Params>();

-------------------------------------------------------------------
[ default style 적용 ]
- reset.css와 같은 디폴트 style을 적용하기 위해서 styled-component의 createGlobalStyle이라는 프로퍼티를 가져온다.

import {createGlobalStyle} from 'styled-component'

const GlobalStyle = createGlobalStyle`
  body{
    color:red;
  }
`

return (
  <>
    <GlobalStyle/>
    <Router/>
  </>
)

-------------------------------------------------------------------
[ Link ]
- a태그를 사용하면 새로고침이 되버리기 때문에 react-router-dom의 link 컴포넌트를 사용한다.
- import { Link } from 'react-router-dom'
- to prop을 통해 경로를 설정한다.

<Coin key={coin.id}>
  <Link to={`/:${coin.id}`}>{coin.name} &rarr;</Link>
</Coin>

- to prop은 경로와 같은 string 값을 줄 수도 있지만 state를 통해 전달하고 싶은 내용을 담아 보낼 수 있다.

<Link
  to={{
    pathname: `/:${coin.id}`,
    state: { name: coin.name },
  }}
>

[ useLocation ]
- useLocation hook은 Link의 to를 통해 보낸 state 값을 포함한 pathname 등을 알려준다.

const location = useLocation();

-------------------------------------------------------------------
[ Nasted Router ]
- route 안에 또 다른 route이다.

-------------------------------------------------------------------
[ useRouteMatch ]
- useRouteMatch hook은 특정한 URL에 있는지 여부를 알려준다.
- import {useRouteMatch} from 'react-router-dom'

- path 정보와 isExact라는 속성으로 true 값을 가지는 객체를 반환한다. 만약 특정 URL에 위치하지 않는다면 null을 반환한다.
- 즉, object 아니면 null을 반환
const priceMatch = useRouteMatch("/:coinId/price");

-------------------------------------------------------------------
[ react-query 설치 방법 ]
- 우리가 우리 스스로 실행하고 있던 로직들을 축약해준다.
- 또한 data를 cashing하여 불필요한 로딩을 없애준다.

0) npm i react-query

1) QueryClient를 import 한다.
  - import {QueryClient} from 'react-query';

2) QueryClient 객체 생성
  - const queryClient = new QueryClient();

3) QueryClientProvider를 import 한다.
  - import {QueryClient,QueryClientProvider} from 'react-query';

4) QueryClientProvider로 적용할 컴포넌트를 감싼다. 이때 client prop에 queryClient 객체를 내려보낸다.

<QueryClientProvider client={queryClient}>
  <ThemeProvider theme={theme}>
     <App />
  </ThemeProvider>
</QueryClientProvider>

-------------------------------------------------------------------
[ react-query 사용 방법 ]

1) fetcher 함수를 만든다.
  - api.ts 파일을 만들어 fetch를 통해 받은 promise를 json화 시킨 데이터를 return 한다.

2) useQuery hook을 불러와 사용한다.
  - import {useQuery} from 'react-query'

3) useQuery의 첫번째 아규먼트는 식별자, 두번째 아규먼트는 fetcher 함수이다.
  - useQuery("allCoins",fetcher)

4) useQuery는 isLoading이라는 boolean 값과 fetcher 함수의 리턴 값인 data를 반환한다.
   isLoading 값은 fetcher가 끝나기 전에는 true를 fetcher가 끝나면 false를 리턴한다.

  - const { isLoading, data } =  useQuery("allCoins",fetcher);

5) useQuery의 세번째 아규먼트는 refetch의 시간을 설정하는 것이다.
  - useQuery("allCoins",fetcher,{refetchInterval:5000})

-------------------------------------------------------------------
[ react-query Devtools ]

1) React query의 devtools를 import 해오면 내 캐시에 있는 query를 볼 수 있다.
  - import { ReactQueryDevtools } from 'react-query/devtools';

2) 컴포넌트에 넣어준다.

function App() {
  return (
    <>
      <GlobalStyle />
      <Router />
      <ReactQueryDevtools initialIsOpen={true} />
    </>
  );
}

-------------------------------------------------------------------
[ react-helmet ]
- react-helmet은 component인데 여기서 무엇을 render하던 그게 문서의 head로 간다.

<Helmet>
  <title>코인</title>
</Helmet>
