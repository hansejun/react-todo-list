[ Recoil ]
- State management library
- global state를 어플리케이션과 분리된 공간에서 관리
- npm i recoil

---------------------------------------------------------------------
[ global state 생성 및 접근 방법]
1) index.jsdptj RecoiRoute 컴포넌트로 감싸준다.
  - import {RecoilRoute} from "recoil";

2) atom 파일을 생성한다.
  - atom은 global state를 담을 공간을 의미한다.
  - atom은 두가지를 요구한다. 첫번째는 key(unique), 두번째는 default value이다.

import { atom } from "recoil";
export const isDarkAtom = atom({
  key: "isDark", // unique
  default: false,
});

3) useRecoilValue()를 통해 atom에 접근한다.
 - const isDark = useRecoilValue(isDarkAtom);

 ---------------------------------------------------------------------
 [ global state 수정 방법 ]

1) useSetRecoilState()를 통해 atom 값을 바꿔줄 fn을 불러온다.
- const setterFn = useSetRecoilState(isDarkAtom);
- 이 setterFn은 usestate에서 setter fn와 같은 기능을 한다.

 ---------------------------------------------------------------------
[ atom의 값과 setter 함수를 같이 불러오기 ]
- const [value, modFn] = useRecoilState(toDoState)
- value는 globalState value, modFn은 globalState의 setter or updater

 ---------------------------------------------------------------------
[ selector ]
- atom의 output을 변형시키는 도구이다.
- import { atom,selector } from "recoil";
- selector에는 key와 getMethod가 있다.

export const toDoSelector = selector({
  key: "toDoSelector",
  get: ({ get }) => {
    const toDos = get(toDoAtom);
    return toDos.length;
  },
});

- toDoAtom의 값이 바뀔 때마다 toDoSelector의 값도 변경된다.





 [ React hook form ]
 - npm i react-hook-form
 - 사용하기 위해서는 useForm이라는 hook을 import한다.

 [ useForm - register ]
 - useForm에는 register Fn이 있는데 이것이 onChange와 같은 이벤트 핸들러와 prop의 역할을 해준다.
 - const {register} =  useForm();
 - register("todo");
 >> 객체가 생성된다.  {name:"todo", .... }

 - <input {...register("todo" )}/>
 - register 함수가 반환하는 객체를 input의 prop으로 전달한다.

 ---------------------------------------------------------------------
 [ useForm - watch ]
 - watch는 form의 입력값들의 변화를 관찰할 수 있게 해주는 함수이다.
 - const {register,watch} =  useForm();
 - console.log(watch()) // register(name)에서 name을 key값으로 가진 객체가 onChange와 같이 계속 update 된다.
 - 5개의 input이 있다면 watch()를 통해 5개 input 값의 update를 관찰할 수 있다.

 ---------------------------------------------------------------------
 [ useForm - handleSubmit ]
 - preventDefault 등 form이 진행될 수 있도록 도와준다.
 - const {register,watch,handleSubmit} =  useForm();
 - form(onSubmit={handleSubmit(onValid,onInValid)})
 - handleSubmit은 두 개의 인자를 가진다. 첫번째는 데이터가 유효했을 때 실행하는 함수, 두번째는 데이터가 유효하지 않을 때 실행하는 함수이다. 두번째는 선택사항이다.

 const onValid = (data) => { console.log(data) }
 - handleSubmit(onValid)를 하면 form 안에 있는 데이터 값들이 onValid 함수의 data 안에 들어간다.

---------------------------------------------------------------------
[ register에 조건 넣기 (유효성 검사를 하기 위한) ]
- register(name, { 조건 });
- <input {...register("todo" ,{ required:true, minLength:10 })}/>

[ 정규식을 통해 이메일 유효성 검사 ]
- pattern 속성을 활용한다.
- register("email" ,{ pattern : {
    value: /^[A-Za-z0-9._%+-]+@naver.com$/,
    message: "Only naver.com"
}})

---------------------------------------------------------------------
[ useForm - formState ]
- formState.errors를 사용하면 어떤 태그에서 어떤 조건이 충족되지 않았는지와 메시지를 담는 객체를 반환한다.

[ 메시지를 담는 법 ]
- <input {...register("todo" ,{ required:"Password is required", minLength:{
    value:5,
    message:"Your password is too short."
} })}/>

- 조건이 충족되지 않으면 error가 발생해 formState.errors 객체에 어떤 조건이 충족되지 않았는지와 메시지가 담긴다.

---------------------------------------------------------------------
[ form interface ]
IForm {
  email:string,
  username:string,
  password:string,
  location?:string  // 선택사항인 경우에는 ?를 붙인다.
}

 - const { register,handleSubmit,formState:{ errors } } =  useForm<IForm>();

 - const { register,handleSubmit,formState:{ errors } } =  useForm<IForm>({ 
      defaultValues:{
        email: "@naver.com"
      }
  });
 >>  useForm({ defaultValues: { ... } })에서 디폴트 값을 설정해줄 수 있다.

---------------------------------------------------------------------
[ useForm - setError ]
- 에러를 생성, 발생 시킬 수 있다.
- setError("name",{});
- setError의 세번째 인자는 선택이다.
- setError("name",{message:"Check your name"},{sholdFocus:true})

---------------------------------------------------------------------
[ useForm - setValue ]
- 값을 정할 수 있다.
- setValue("toDo","")
- toDo라는 이름을 가진 register의 값을 빈문자열로 한다.

---------------------------------------------------------------------
[ validate ]
- 조건을 만들어 유효성 검사를 할 수 있다. true일 경우 패스, false일 경우 message에 저장된다.
<input
  {...register("name", {
      required: "Check your name",
      validate: {
        noHan: (value) => (value.includes("han") ? "No han" : true),
      },
  })}
/>

<span>{errors?.name?.message}</span>      << message를 통해서 반환된 string을 전달할 수 있다.